{"version":3,"sources":["reducers.js","components/Card.js","components/CardList.js","components/SearchBox.js","components/Sticky.js","components/ErrorBoundry.js","containers/App.js","actions.js","constants.js","serviceWorker.js","index.js"],"names":["initialStateSearch","searchField","initialStateMechs","isPending","mechs","error","Card","id","username","name","email","className","src","alt","CardList","map","user","i","key","SearchBox","searchChange","type","placeholder","onChange","Sticky","args","style","overflowY","height","children","ErrorBoundry","state","hasError","info","this","setState","props","Component","App","onRequestMechs","onSearchChange","filteredMechs","filter","bot","toLowerCase","includes","console","log","connect","searchMechs","requestMechs","dispatch","event","payload","target","value","fetch","then","resp","json","data","catch","err","Boolean","window","location","hostname","match","logger","createLogger","store","createStore","combineReducers","action","applyMiddleware","thunkMiddleware","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.0a37a7c0.chunk.js","sourcesContent":["import { \r\n  CHANGE_SEARCH_FIELD,\r\n  REQUEST_MECHS_PENDING,\r\n  REQUEST_MECHS_SUCCESS,\r\n  REQUEST_MECHS_FAILED\r\n} from './constants.js';\r\n\r\nconst initialStateSearch = {\r\n  searchField: '',\r\n\r\n}\r\n\r\nexport const searchMechs = (state = initialStateSearch, action = {}) => {\r\n  switch(action.type) {\r\n    case CHANGE_SEARCH_FIELD:\r\n      //eturn Object.assign({}, state, { searchField: action.payload });\r\n      return { ...state, searchField: action.payload };\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n\r\nconst initialStateMechs = {\r\n  isPending: false,\r\n  mechs: [],\r\n  error: ''\r\n}\r\n\r\nexport const requestMechs = (state = initialStateMechs, action = {}) => {\r\n  switch(action.type) {\r\n    case REQUEST_MECHS_PENDING:\r\n      return { ...state, isPending: true };\r\n    case REQUEST_MECHS_SUCCESS:\r\n      return { ...state, mechs: action.payload, isPending: false };\r\n    case REQUEST_MECHS_FAILED:\r\n      return { ...state, error: action.payload, isPending: false };\r\n    default:\r\n      return state;\r\n  }\r\n  \r\n    \r\n}","import React from 'react';\r\n\r\nfunction Card({ id, username, name, email }) {\r\n    return (\r\n        <div className='tc bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5'>\r\n            <img src={`https://robohash.org/${id}?200x200`} alt=\"robot\" />\r\n            <div>\r\n                <h2>{username}</h2>\r\n                <p><span className=\"b\">Real Name:</span> <span className=\"i\">{name}</span></p>\r\n                <p><span className=\"b\">Email:</span> <span className=\"i\">{email}</span></p>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Card;","import React from 'react';\r\nimport Card from './Card.js';\r\n\r\nfunction CardList( { mechs } ) {\r\n  // if (1)\r\n  //   throw new Error('LUUK IM UR FATHER');\r\n  return (\r\n    <div>\r\n      {\r\n        mechs.map((user, i) => {\r\n          return (\r\n            <Card\r\n              key={i} \r\n              id={mechs[i].id} \r\n              username={mechs[i].username} \r\n              name={mechs[i].name}\r\n              email={mechs[i].email}\r\n            />\r\n          );\r\n        })\r\n      }\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default CardList;","import React from 'react';\r\n\r\nfunction SearchBox({ searchField, searchChange }) {\r\n  return (\r\n    <div className=\"pa2\">\r\n      <input \r\n        className=\"pa3 ba b--green bg-lightest-blue\" \r\n        type='search' \r\n        placeholder='search mechs'\r\n        onChange={searchChange} \r\n      />\r\n    </div>        \r\n  );\r\n}\r\n\r\nexport default SearchBox;","import React from 'react';\r\n\r\nconst Sticky = (args) => {\r\n  return (\r\n    <div style={\r\n        { \r\n          overflowY: 'scroll', \r\n          height: '800px'\r\n        }\r\n      }>\r\n      {args.children}\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Sticky;","import React, { Component } from 'react';\r\n\r\nclass ErrorBoundry extends Component {\r\n  constructor(args) {\r\n    super(args);\r\n    this.state = {\r\n      hasError: false,\r\n    }\r\n  }\r\n\r\n  componentDidCatch(error, info) {\r\n    this.setState({ hasError: true });\r\n  }\r\n\r\n  render() {\r\n    if (this.state.hasError) {\r\n      return <h1>tralalalalalllalal</h1>;\r\n    }\r\n    return this.props.children;\r\n  }\r\n}\r\n\r\nexport default ErrorBoundry;","import React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport CardList from '../components/CardList';\r\nimport SearchBox from '../components/SearchBox';\r\nimport Sticky from '../components/Sticky';\r\nimport ErrorBoundry from '../components/ErrorBoundry';\r\nimport './App.css';\r\n\r\nimport { setSearchField, requestMechs } from '../actions.js';\r\n\r\nconst mapStateToProps = state => {\r\n  return {\r\n    searchField: state.searchMechs.searchField,\r\n    mechs: state.requestMechs.mechs,\r\n    isPending: state.requestMechs.isPending,\r\n    error: state.requestMechs.error\r\n  }\r\n}\r\nconst mapDispatchToProps = dispatch => {\r\n  return {\r\n    onSearchChange: event => dispatch(setSearchField(event.target.value)),\r\n    onRequestMechs: () => dispatch(requestMechs())\r\n  }\r\n}\r\n\r\nclass App extends Component {\r\n\r\n  componentDidMount() {\r\n    this.props.onRequestMechs();\r\n  }\r\n\r\n  render() {\r\n    const { searchField, onSearchChange, mechs, isPending } = this.props;\r\n    const filteredMechs = mechs.filter(bot => {\r\n      return bot.username.toLowerCase().includes(searchField.toLowerCase())\r\n    });\r\n    if (isPending)\r\n      return <h1>Loading...</h1>\r\n    else {\r\n      console.log(\"IM HERE\", mechs)\r\n      return (\r\n        <div className=\"tc\">\r\n          <h1 className=\"f1\">MechaWorld</h1>\r\n          <SearchBox searchChange={onSearchChange}/>\r\n          <Sticky>\r\n            <ErrorBoundry>\r\n              <CardList mechs={filteredMechs}/>\r\n            </ErrorBoundry>\r\n          </Sticky>\r\n        </div> \r\n      );      \r\n    }\r\n  }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(App);","import { \r\n  CHANGE_SEARCH_FIELD,\r\n  REQUEST_MECHS_PENDING,\r\n  REQUEST_MECHS_SUCCESS,\r\n  REQUEST_MECHS_FAILED\r\n} from './constants.js';\r\n\r\nexport const setSearchField = (text) => (\r\n  { \r\n    type: CHANGE_SEARCH_FIELD,\r\n    payload: text\r\n  }\r\n);\r\n\r\nexport const requestMechs = () => (dispatch) => {\r\n  dispatch({ type: REQUEST_MECHS_PENDING });\r\n  fetch('https://jsonplaceholder.typicode.com/users')\r\n    .then( resp => resp.json())\r\n    .then(data => dispatch({ type: REQUEST_MECHS_SUCCESS, payload: data }))\r\n    .catch(err => dispatch({ type: REQUEST_MECHS_FAILED, payload: err }));\r\n}\r\n\r\n","export const CHANGE_SEARCH_FIELD = 'CHANGE_SEARCH_FIELD';\r\n\r\nexport const REQUEST_MECHS_PENDING = 'REQUEST_MECHS_PENDING';\r\nexport const REQUEST_MECHS_SUCCESS = 'REQUEST_MECHS_SUCCESS';\r\nexport const REQUEST_MECHS_FAILED = 'REQUEST_MECHS_FAILED';","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { createStore, applyMiddleware, combineReducers } from 'redux';\nimport { createLogger } from 'redux-logger';\nimport { searchMechs, requestMechs } from './reducers';\nimport thunkMiddleware from 'redux-thunk';\nimport './index.css';\nimport 'tachyons';\nimport App from './containers/App';\n\nimport * as serviceWorker from './serviceWorker';\n\nconst logger = createLogger();\nconst store = createStore(\n  combineReducers({searchMechs, requestMechs}), \n  applyMiddleware(thunkMiddleware, logger)\n);\n\nReactDOM.render(\n  <Provider store = { store }>\n    <App />\n  </Provider>, \n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n "],"sourceRoot":""}